// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Game matches snapshot 1`] = `
<Game
  game={
    Object {
      "_id": 1,
      "player1": 1,
      "player2": 2,
      "plays": Array [],
    }
  }
  player1={
    Object {
      "_id": 1,
      "avatar": "some",
      "usernames": "Miguel",
    }
  }
  player2={
    Object {
      "_id": 2,
      "avatar": "some",
      "usernames": "Juan",
    }
  }
  updateGame={[MockFunction]}
>
  <styled.section>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-gZMcBi",
            "isStatic": true,
            "lastClassName": "bmOyb",
            "rules": Array [
              "
    width: 100%;
    min-height: 100vh;
    height: 100%;
    display: flex;
    ",
              "
    @media (max-width: ",
              "1170px",
              ") {
      ",
              "
        flex-direction: column;
    ",
              "
    }
  ",
              "
",
            ],
          },
          "displayName": "styled.section",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-gZMcBi",
          "target": "section",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <section
        className="sc-gZMcBi bmOyb"
      >
        <styled.div>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gqjmRU",
                  "isStatic": true,
                  "lastClassName": "iSPpsc",
                  "rules": Array [
                    "
    width: 50%;
    background-color: rgba(211,134,39,0.25);
    min-height: 100vh;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    div.top-info {
        display: flex;
        flex-direction: column;
        div.round-info {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            h2 {
                margin-top: 0;
                font-size: 2.5em;
            }
            h3 {
                margin-top: 0;
                font-size: 2em;
            }
        }
    }
    ",
                    "
    @media (max-width: ",
                    "1170px",
                    ") {
      ",
                    "
        width: 100%;
        max-height: 50vh;
        min-height: 50vh;
        height: 100%;
        flex-direction: column;
        div.top-info {
            flex-direction: row;
            div {
                width: 50%;
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
            }
            div.move-selector {
                h3 {
                    font-size: 1.2rem;
                    text-align: center;
                }
                em {
                    font-size: 1rem;
                    text-align: center;
                }
            }
            div.round-info {
                h2 {
                    font-size: 1.8rem;
                    text-align: center;
                }
                h3 {
                    font-size: 1.2rem;
                    text-align: center;
                }
            }
        }
    ",
                    "
    }
  ",
                    "
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gqjmRU",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="sc-gqjmRU iSPpsc"
            >
              <div
                className="top-info"
              >
                <div
                  className="round-info"
                >
                  <h2>
                    Round 
                    1
                  </h2>
                  <h3>
                    's play
                  </h3>
                </div>
                <div
                  className="move-selector"
                >
                  <MovePicker
                    name="player1"
                    onChange={[Function]}
                    value={1}
                  >
                    <Styled(styled.div)>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-htpNat",
                              "isStatic": true,
                              "lastClassName": "csBEKn",
                              "rules": Array [
                                "
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
",
                                "
    flex-direction: column;
    font-size: 1.5em;
    em, h3 {
        margin-top: 1.5rem;
    }
",
                              ],
                            },
                            "displayName": "Styled(styled.div)",
                            "foldedComponentIds": Array [
                              "sc-bwzfXH",
                            ],
                            "render": [Function],
                            "styledComponentId": "sc-htpNat",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={[Function]}
                      >
                        <div
                          className="sc-bwzfXH sc-htpNat csBEKn"
                        >
                          <Styled(styled.img)
                            alt="Avatar preview"
                            onClick={[Function]}
                            src="../images/paper.png"
                          >
                            <StyledComponent
                              alt="Avatar preview"
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-bxivhb",
                                    "isStatic": false,
                                    "lastClassName": "gQvybV",
                                    "rules": Array [
                                      "
    width: 6rem;
    height: 6rem;
    ",
                                      "
    @media (max-width: ",
                                      "1170px",
                                      ") {
      ",
                                      "
        width: 3rem;
        height: 3rem;
    ",
                                      "
    }
  ",
                                      "
    object-fit: fill;
    border: 3px solid rgba(255,255,255,0.75);
    border-radius: 50%;
    padding: 1rem;
    cursor: pointer;
    animation: ",
                                      Keyframes {
                                        "id": "sc-keyframes-jTmlpk",
                                        "inject": [Function],
                                        "name": "jTmlpk",
                                        "rules": Array [
                                          "@-webkit-keyframes jTmlpk{0%{box-shadow:0 2px 8px rgba(255,255,255,0.30),0 3px 6px rgba(255,255,255,0.22);}50%{box-shadow:0 14px 28px rgba(255,255,255,0.25),0 10px 10px rgba(255,255,255,0.22);}100%{box-shadow:0 2px 8px rgba(255,255,255,0.30),0 3px 6px rgba(255,255,255,0.22);}}",
                                          "@keyframes jTmlpk{0%{box-shadow:0 2px 8px rgba(255,255,255,0.30),0 3px 6px rgba(255,255,255,0.22);}50%{box-shadow:0 14px 28px rgba(255,255,255,0.25),0 10px 10px rgba(255,255,255,0.22);}100%{box-shadow:0 2px 8px rgba(255,255,255,0.30),0 3px 6px rgba(255,255,255,0.22);}}",
                                        ],
                                        "toString": [Function],
                                      },
                                      " 3s infinite;
    transition: all 2s ease-in-out;
    position: relative;
    ",
                                      [Function],
                                      "
",
                                      "
    background-color: white;
",
                                    ],
                                  },
                                  "displayName": "Styled(styled.img)",
                                  "foldedComponentIds": Array [
                                    "sc-bdVaJa",
                                  ],
                                  "render": [Function],
                                  "styledComponentId": "sc-bxivhb",
                                  "target": "img",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              onClick={[Function]}
                              src="../images/paper.png"
                            >
                              <img
                                alt="Avatar preview"
                                className="sc-bdVaJa sc-bxivhb gQvybV"
                                onClick={[Function]}
                                src="../images/paper.png"
                              />
                            </StyledComponent>
                          </Styled(styled.img)>
                          <em>
                            Tap the image to change your attack
                          </em>
                          <h3>
                            Attacking with 
                            paper
                          </h3>
                        </div>
                      </StyledComponent>
                    </Styled(styled.div)>
                  </MovePicker>
                </div>
              </div>
              <div
                className="next-or-play"
              >
                <styled.button
                  noFont={false}
                  onClick={[Function]}
                >
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-ifAKCX",
                          "isStatic": false,
                          "lastClassName": "jmMePK",
                          "rules": Array [
                            "
    background-color: #d38627;
    color: white;
    padding: 1rem 2rem;
    padding-right: 3rem;
    font-family: 'Bigno';
    border: none;
    font-weight: bold;
    border-top-left-radius: 40px;
    border-bottom-right-radius: 40px;
    transition: all .3s ease-in-out;
    cursor: pointer;
    font-size: ",
                            [Function],
                            ";
    ",
                            [Function],
                            "
    span {
        font-size: 4rem;
    }
    ",
                            "
    @media (max-width: ",
                            "1170px",
                            ") {
      ",
                            "
        &[disabled] {
            font-size: unset;
        }
    ",
                            "
    }
  ",
                            "
    &:focus, &:active {
        outline: none;
    }
    animation: ",
                            Keyframes {
                              "id": "sc-keyframes-cyknLF",
                              "inject": [Function],
                              "name": "cyknLF",
                              "rules": Array [
                                "@-webkit-keyframes cyknLF{0%{box-shadow:0 2px 8px rgba(255,255,255,0.30),0 3px 6px rgba(255,255,255,0.22);}50%{box-shadow:0 19px 28px rgba(255,255,255,0.30),0 15px 12px rgba(255,255,255,0.22);}100%{box-shadow:0 2px 8px rgba(255,255,255,0.30),0 3px 6px rgba(255,255,255,0.22);}}",
                                "@keyframes cyknLF{0%{box-shadow:0 2px 8px rgba(255,255,255,0.30),0 3px 6px rgba(255,255,255,0.22);}50%{box-shadow:0 19px 28px rgba(255,255,255,0.30),0 15px 12px rgba(255,255,255,0.22);}100%{box-shadow:0 2px 8px rgba(255,255,255,0.30),0 3px 6px rgba(255,255,255,0.22);}}",
                              ],
                              "toString": [Function],
                            },
                            " 3s infinite;
    &:hover {
        padding: 1rem 3rem;
        padding-right: 4rem;
        border-top-left-radius: 0;
        border-bottom-right-radius: 0;
        border-top-right-radius: 40px;
        border-bottom-left-radius: 40px;
    }
    ",
                            [Function],
                            "
    ",
                            [Function],
                            "
",
                          ],
                        },
                        "displayName": "styled.button",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-ifAKCX",
                        "target": "button",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    noFont={false}
                    onClick={[Function]}
                  >
                    <button
                      className="sc-ifAKCX jmMePK"
                      onClick={[Function]}
                    >
                      SET MOVE
                    </button>
                  </StyledComponent>
                </styled.button>
              </div>
            </div>
          </StyledComponent>
        </styled.div>
        <styled.div>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-VigVT",
                  "isStatic": true,
                  "lastClassName": "iSGujp",
                  "rules": Array [
                    "
    width: 50%;
    background-color: rgba(0,0,0,0.87);
    min-height: 100vh;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    ",
                    "
    @media (max-width: ",
                    "1170px",
                    ") {
      ",
                    "
        width: 100%;
        max-height: 50vh;
        min-height: 50vh;
        justify-content: flex-start;
    ",
                    "
    }
  ",
                    "
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-VigVT",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="sc-VigVT iSGujp"
            >
              <History
                game={
                  Object {
                    "_id": 1,
                    "player1": 1,
                    "player2": 2,
                    "plays": Array [],
                  }
                }
                player1={
                  Object {
                    "_id": 1,
                    "avatar": "some",
                    "usernames": "Miguel",
                  }
                }
                player2={
                  Object {
                    "_id": 2,
                    "avatar": "some",
                    "usernames": "Juan",
                  }
                }
                updateGame={[MockFunction]}
              >
                <styled.div>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-htoDjs",
                          "isStatic": true,
                          "lastClassName": "iSJsHV",
                          "rules": Array [
                            "
    width: 80%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    ",
                            "
    @media (max-width: ",
                            "1170px",
                            ") {
      ",
                            "
        width: 100%;
    ",
                            "
    }
  ",
                            "
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-htoDjs",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="sc-htoDjs iSJsHV"
                    >
                      <h2>
                        Score
                      </h2>
                      <styled.ul>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-dnqmqq",
                                "isStatic": true,
                                "lastClassName": "cLNjBA",
                                "rules": Array [
                                  "
    height: 100%;
    max-height: 80vh;
    width: 60%;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    ",
                                  "
    @media (max-width: ",
                                  "1170px",
                                  ") {
      ",
                                  "
        max-height: 30vh;
        padding-left: 0;
        width: 80%;
    ",
                                  "
    }
  ",
                                  "
    &::-webkit-scrollbar-track
    {
        -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);
        border-radius: 10px;
        background-color: rgba(0,0,0,.75);
    }

    &::-webkit-scrollbar
    {
        width: 8px;
        background-color: rgba(0,0,0,.75);
    }

    &::-webkit-scrollbar-thumb
    {
        border-radius: 10px;
        -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,.3);
        background-color: #d38627;
    }
",
                                ],
                              },
                              "displayName": "styled.ul",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-dnqmqq",
                              "target": "ul",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <ul
                            className="sc-dnqmqq cLNjBA"
                          >
                            <Styled(Component)>
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-iwsKbI",
                                      "isStatic": true,
                                      "lastClassName": "doddjm",
                                      "rules": Array [
                                        "
    display: grid;
    grid-template-columns: 50% 50%;
    width: 100%;
    margin: 0 auto;
    justify-content: space-around;
    align-items: center;
    border-top: 1px solid white;
    span {
        font-size: 1.6em;
        padding: .5rem;
    }
",
                                      ],
                                    },
                                    "displayName": "Styled(Component)",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-iwsKbI",
                                    "target": Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "render": [Function],
                                    },
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <ForwardRef
                                  className="sc-iwsKbI doddjm"
                                >
                                  <PoseElement
                                    className="sc-iwsKbI doddjm"
                                    elementType="li"
                                    innerRef={null}
                                    poseConfig={
                                      Object {
                                        "enter": Object {
                                          "delay": 300,
                                          "opacity": 1,
                                        },
                                      }
                                    }
                                  >
                                    <li
                                      className="sc-iwsKbI doddjm"
                                    >
                                      <span>
                                        Round
                                      </span>
                                      <span>
                                        Winner
                                      </span>
                                    </li>
                                  </PoseElement>
                                </ForwardRef>
                              </StyledComponent>
                            </Styled(Component)>
                            <PoseGroup
                              flipMove={true}
                            >
                              <Transition
                                enterAfterExit={false}
                                enterPose="enter"
                                exitPose="exit"
                                flipMove={true}
                                preEnterPose="exit"
                              />
                            </PoseGroup>
                          </ul>
                        </StyledComponent>
                      </styled.ul>
                    </div>
                  </StyledComponent>
                </styled.div>
              </History>
            </div>
          </StyledComponent>
        </styled.div>
      </section>
    </StyledComponent>
  </styled.section>
</Game>
`;
