// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`History matches snapshot 1`] = `
<Statistics
  goBackTo={[MockFunction]}
  lastScreen="setup"
>
  <styled.section>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-gzVnrw",
            "isStatic": true,
            "lastClassName": "bQiGEU",
            "rules": Array [
              "
    width: 80%;
    height: 80vh;
    display: flex;
    flex-direction: column;
    align-items: center;
    margin: 0 auto;
    h2, section, button {
        margin-top: 3rem;
    }
",
            ],
          },
          "displayName": "styled.section",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-gzVnrw",
          "target": "section",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <section
        className="sc-gzVnrw bQiGEU"
      >
        <h2>
          Statistics
        </h2>
        <styled.ul>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-EHOje",
                  "isStatic": true,
                  "lastClassName": "fjKEmO",
                  "rules": Array [
                    "
    height: 100%;
    max-height: 80vh;
    width: 60%;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    ",
                    "
    @media (max-width: ",
                    "1170px",
                    ") {
      ",
                    "
        max-height: 30vh;
        padding-left: 0;
        width: 80%;
    ",
                    "
    }
  ",
                    "
    &::-webkit-scrollbar-track
    {
        -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);
        border-radius: 10px;
        background-color: rgba(0,0,0,.75);
    }

    &::-webkit-scrollbar
    {
        width: 8px;
        background-color: rgba(0,0,0,.75);
    }

    &::-webkit-scrollbar-thumb
    {
        border-radius: 10px;
        -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,.3);
        background-color: #d38627;
    }
",
                  ],
                },
                "displayName": "styled.ul",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-EHOje",
                "target": "ul",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <ul
              className="sc-EHOje fjKEmO"
            >
              <Styled(Styled(Component))>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-htoDjs",
                        "isStatic": true,
                        "lastClassName": "bNeIaK",
                        "rules": Array [
                          "
    display: grid;
    grid-template-columns: 50% 50%;
    width: 100%;
    margin: 0 auto;
    justify-content: space-around;
    align-items: center;
    border-top: 1px solid white;
    span {
        font-size: 1.6em;
        padding: .5rem;
    }
",
                          "
    grid-template-columns: 50% 1fr 1fr;
",
                        ],
                      },
                      "displayName": "Styled(Styled(Component))",
                      "foldedComponentIds": Array [
                        "sc-bZQynM",
                      ],
                      "render": [Function],
                      "styledComponentId": "sc-htoDjs",
                      "target": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "render": [Function],
                      },
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <ForwardRef
                    className="sc-bZQynM sc-htoDjs bNeIaK"
                  >
                    <PoseElement
                      className="sc-bZQynM sc-htoDjs bNeIaK"
                      elementType="li"
                      innerRef={null}
                      poseConfig={
                        Object {
                          "enter": Object {
                            "delay": 300,
                            "opacity": 1,
                          },
                        }
                      }
                    >
                      <li
                        className="sc-bZQynM sc-htoDjs bNeIaK"
                      >
                        <span>
                          Player
                        </span>
                        <span>
                          Games
                        </span>
                        <span>
                          Wins
                        </span>
                      </li>
                    </PoseElement>
                  </ForwardRef>
                </StyledComponent>
              </Styled(Styled(Component))>
              <Spinner
                key="spinner"
                width="5rem"
              >
                <styled.div
                  width="5rem"
                >
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-bdVaJa",
                          "isStatic": false,
                          "lastClassName": "fyxaru",
                          "rules": Array [
                            "
    width: ",
                            [Function],
                            ";
    position: relative;
    margin: 0px auto;
    div.ad15 {
        animation-duration: 1.5s;
    }
    div.ateiu {
        animation-timing-function: ease-in-out;
    }
    .overwatch-logo {
        filter:
            drop-shadow(0 0 120px rgba(255,255,255,0.15))
            drop-shadow(0 0 16px rgba(255,255,255,0.05));
            opacity: 0.8;
        }
    .circularCW,
    .circularCCW {
        height: 100%;
        transform-origin: center center;
        width: 100%;
        position: absolute;
        top: 0; bottom: 0; left: 0; right: 0;
        margin: auto;
    }
    .circularCW {
        animation: ",
                            Keyframes {
                              "id": "sc-keyframes-cZxgpV",
                              "inject": [Function],
                              "name": "cZxgpV",
                              "rules": Array [
                                "@-webkit-keyframes cZxgpV{100%{-webkit-transform:rotate(360deg);-ms-transform:rotate(360deg);transform:rotate(360deg);}}",
                                "@keyframes cZxgpV{100%{-webkit-transform:rotate(360deg);-ms-transform:rotate(360deg);transform:rotate(360deg);}}",
                              ],
                              "toString": [Function],
                            },
                            " 2s linear infinite;
    }
    .circularCCW {
        animation: ",
                            Keyframes {
                              "id": "sc-keyframes-bWxUsw",
                              "inject": [Function],
                              "name": "bWxUsw",
                              "rules": Array [
                                "@-webkit-keyframes bWxUsw{100%{-webkit-transform:rotate(-360deg);-ms-transform:rotate(-360deg);transform:rotate(-360deg);}}",
                                "@keyframes bWxUsw{100%{-webkit-transform:rotate(-360deg);-ms-transform:rotate(-360deg);transform:rotate(-360deg);}}",
                              ],
                              "toString": [Function],
                            },
                            " 4s linear infinite;
    }
    .path,
    .path2,
    .path3,
    .path4,
    .path5,
    .path6,
    .path7,
    .path8 {
        stroke-linecap: square;
        stroke-width: 33;
        opacity: 0.8;
    }
    .path {
        stroke-dasharray: 1400,2600;
        stroke-dashoffset: 0;
        animation: ",
                            Keyframes {
                              "id": "sc-keyframes-heArYz",
                              "inject": [Function],
                              "name": "heArYz",
                              "rules": Array [
                                "@-webkit-keyframes heArYz{0%{stroke-dasharray:2000,2600;stroke-dashoffset:0;}50%{stroke-dasharray:2400,2600;stroke-dashoffset:-500px;}100%{stroke-dasharray:2000,2600;stroke-dashoffset:0;}}",
                                "@keyframes heArYz{0%{stroke-dasharray:2000,2600;stroke-dashoffset:0;}50%{stroke-dasharray:2400,2600;stroke-dashoffset:-500px;}100%{stroke-dasharray:2000,2600;stroke-dashoffset:0;}}",
                              ],
                              "toString": [Function],
                            },
                            " 3.7s ease-in-out infinite;
        opacity: 0.3;
    }
    .path2 {
        stroke-dasharray: 40,2600;
        stroke-dashoffset: -500px;
    }
    .path3 {
        stroke-dasharray: 200,2600;
        stroke-dashoffset: -700px;
    }
    .path4 {
        stroke-dasharray: 40,2600;
        stroke-dashoffset: -2000px;
        animation: ",
                            Keyframes {
                              "id": "sc-keyframes-fGYOMt",
                              "inject": [Function],
                              "name": "fGYOMt",
                              "rules": Array [
                                "@-webkit-keyframes fGYOMt{0%{stroke-dasharray:100,2600;stroke-dashoffset:-2000px;}50%{stroke-dasharray:500,2600;stroke-dashoffset:-1000px;}100%{stroke-dasharray:100,2600;stroke-dashoffset:-1960px;}}",
                                "@keyframes fGYOMt{0%{stroke-dasharray:100,2600;stroke-dashoffset:-2000px;}50%{stroke-dasharray:500,2600;stroke-dashoffset:-1000px;}100%{stroke-dasharray:100,2600;stroke-dashoffset:-1960px;}}",
                              ],
                              "toString": [Function],
                            },
                            " 2.5s ease-in-out infinite;
    }
    .path5 {
        stroke-dasharray: 200,2600;
        stroke-dashoffset: 0;
    }
    .path6 {
        stroke-dasharray: 300,2600;
        stroke-dashoffset: -1000px;
    }
    .path7 {
        stroke-dasharray: 40,2600;
        stroke-dashoffset: -1200px;
    }
    .path8 {
        stroke-dasharray: 100,2600;
        stroke-dashoffset: -300px;
    }
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-bdVaJa",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    width="5rem"
                  >
                    <div
                      className="sc-bdVaJa fyxaru"
                      width="5rem"
                    >
                      <svg
                        className="overwatch-logo"
                        viewBox="0 0 1000 1000"
                      >
                        <svg
                          height="600"
                          width="600"
                          x="200"
                          xmlns="http://www.w3.org/2000/svg"
                          y="210"
                        >
                          <defs />
                          <path
                            color="#000"
                            d="M296.704.004c-66.766.428-132.772 24.23-184.63 66.083l56.662 65.786c47.82-37.74 112.256-53.118 172.018-41.237 32.844 6.318 64.096 20.74 90.464 41.237l56.66-65.786C434.242 22.804 365.77-1.03 296.705.004z"
                            fill="#fa9c1e"
                            overflow="visible"
                          />
                          <path
                            color="#000"
                            d="M93.628 82.253C33.924 138.343-1.082 219.877.026 302.123c.035 85.37 38.978 169.23 103.652 224.696 59.78 52.283 141.085 78.917 220.46 72.18 86.01-6.405 167.65-52.345 218.118-122.143 49.125-66.33 68.37-153.797 52.064-234.91-11.987-62.09-44.54-119.634-90.837-162.405l-56.662 65.786c45.657 43.034 70.586 106.557 65.886 169.224-2.056 31.05-11.074 61.69-26.314 88.96L370.92 291.974 312.66 166.39l-.088 190.18 116.695 112.926c-52.002 40.402-123.353 53.802-186.578 35.894-25.744-7.18-50.122-19.23-71.31-35.398L288.87 356.57c-.206-61.831.717-128.578 0-190.383L230.52 291.974 114.058 404.437c-35.53-62.024-36.38-142.21-2.182-204.927 10.69-20.092 24.84-38.428 41.257-54.182L96.47 79.542l-2.842 2.71z"
                            fill="#fff"
                            overflow="visible"
                          />
                        </svg>
                      </svg>
                      <svg
                        className="circularCW"
                        viewBox="0 0 1000 1000"
                      >
                        <circle
                          className="path"
                          cx="500"
                          cy="500"
                          fill="none"
                          r="355"
                          stroke="#fa9c1e"
                        />
                      </svg>
                      <svg
                        className="circularCCW ad15"
                        viewBox="0 0 1000 1000"
                      >
                        <circle
                          className="path2"
                          cx="500"
                          cy="500"
                          fill="none"
                          r="355"
                          stroke="#fa9c1e"
                        />
                      </svg>
                      <svg
                        className="circularCW"
                        viewBox="0 0 1000 1000"
                      >
                        <circle
                          className="path3"
                          cx="500"
                          cy="500"
                          fill="none"
                          r="355"
                          stroke="#fa9c1e"
                        />
                      </svg>
                      <svg
                        className="circularCW"
                        viewBox="0 0 1000 1000"
                      >
                        <circle
                          className="path4"
                          cx="500"
                          cy="500"
                          fill="none"
                          r="355"
                          stroke="#fa9c1e"
                        />
                      </svg>
                      <svg
                        className="circularCW"
                        viewBox="0 0 1000 1000"
                      >
                        <circle
                          className="path5"
                          cx="500"
                          cy="500"
                          fill="none"
                          r="420"
                          stroke="#fff"
                        />
                      </svg>
                      <svg
                        className="circularCW"
                        viewBox="0 0 1000 1000"
                      >
                        <circle
                          className="path6"
                          cx="500"
                          cy="500"
                          fill="none"
                          r="420"
                          stroke="#fff"
                        />
                      </svg>
                      <svg
                        className="circularCCW"
                        viewBox="0 0 1000 1000"
                      >
                        <circle
                          className="path7"
                          cx="500"
                          cy="500"
                          fill="none"
                          r="420"
                          stroke="#fff"
                        />
                      </svg>
                      <svg
                        className="circularCCW ateiu"
                        viewBox="0 0 1000 1000"
                      >
                        <circle
                          className="path8"
                          cx="500"
                          cy="500"
                          fill="none"
                          r="420"
                          stroke="#fff"
                        />
                      </svg>
                    </div>
                  </StyledComponent>
                </styled.div>
              </Spinner>
            </ul>
          </StyledComponent>
        </styled.ul>
        <styled.button
          onClick={[Function]}
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bwzfXH",
                  "isStatic": false,
                  "lastClassName": "bcLagy",
                  "rules": Array [
                    "
    background-color: #d38627;
    color: white;
    padding: 1rem 2rem;
    padding-right: 3rem;
    font-family: 'Bigno';
    border: none;
    font-weight: bold;
    border-top-left-radius: 40px;
    border-bottom-right-radius: 40px;
    transition: all .3s ease-in-out;
    cursor: pointer;
    font-size: ",
                    [Function],
                    ";
    ",
                    [Function],
                    "
    span {
        font-size: 4rem;
    }
    ",
                    "
    @media (max-width: ",
                    "1170px",
                    ") {
      ",
                    "
        &[disabled] {
            font-size: unset;
        }
    ",
                    "
    }
  ",
                    "
    &:focus, &:active {
        outline: none;
    }
    animation: ",
                    Keyframes {
                      "id": "sc-keyframes-cyknLF",
                      "inject": [Function],
                      "name": "cyknLF",
                      "rules": Array [
                        "@-webkit-keyframes cyknLF{0%{box-shadow:0 2px 8px rgba(255,255,255,0.30),0 3px 6px rgba(255,255,255,0.22);}50%{box-shadow:0 19px 28px rgba(255,255,255,0.30),0 15px 12px rgba(255,255,255,0.22);}100%{box-shadow:0 2px 8px rgba(255,255,255,0.30),0 3px 6px rgba(255,255,255,0.22);}}",
                        "@keyframes cyknLF{0%{box-shadow:0 2px 8px rgba(255,255,255,0.30),0 3px 6px rgba(255,255,255,0.22);}50%{box-shadow:0 19px 28px rgba(255,255,255,0.30),0 15px 12px rgba(255,255,255,0.22);}100%{box-shadow:0 2px 8px rgba(255,255,255,0.30),0 3px 6px rgba(255,255,255,0.22);}}",
                      ],
                      "toString": [Function],
                    },
                    " 3s infinite;
    &:hover {
        padding: 1rem 3rem;
        padding-right: 4rem;
        border-top-left-radius: 0;
        border-bottom-right-radius: 0;
        border-top-right-radius: 40px;
        border-bottom-left-radius: 40px;
    }
    ",
                    [Function],
                    "
    ",
                    [Function],
                    "
",
                  ],
                },
                "displayName": "styled.button",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bwzfXH",
                "target": "button",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            onClick={[Function]}
          >
            <button
              className="sc-bwzfXH bcLagy"
              onClick={[Function]}
            >
              Go Back
            </button>
          </StyledComponent>
        </styled.button>
      </section>
    </StyledComponent>
  </styled.section>
</Statistics>
`;
